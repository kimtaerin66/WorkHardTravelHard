{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","value","returnKeyType","onChangeText","e","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","FontAwesome","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","marginTop","justifyContent","flexDirection","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.e46629f4.chunk.js","sourcesContent":["\r\nexport const theme = {\r\n    bg : \"black\",\r\n    gray: \"#3A3D40\",\r\n    toDoBg : \"#5C5C60\",\r\n};","import { StatusBar } from \"expo-status-bar\";\nimport {\n  Platform,\n  StyleSheet,\n  ScrollView,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport { useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useEffect } from \"react\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  //보통 기본값으로 빈배열을 쓰지만, 오브젝트 사용\n  const [toDos, setToDos] = useState({});\n  //앱이 실행될때 바로실행\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (e) => setText(e);\n  const saveToDos = async (toSave) => {\n    //현재가지고있는 todo를 string으로만들고 저장\n    await AsyncStorage.setItem(\"@toDos\", JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(\"@toDos\");\n    if (s) {\n      setToDos(JSON.parse(s)); //다시 obj로 만들기\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      //작성된게없다면\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancle\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos }; //복사\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 32,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 32,\n              fontWeight: \"600\",\n              color: working ? theme.gray : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        value={text}\n        returnKeyType=\"done\"\n        onChangeText={onChangeText}\n        placeholder={working ? \"Add a To Do\" : \"Where do you wanna go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text>\n                  <FontAwesome name=\"close\" size={20} color={theme.gray} />\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    //일반css에는 없는 padding속성\n    paddingHorizontal: 20,\n  },\n  header: {\n    marginTop: 100,\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginTop: 20,\n    fontSize: 18,\n    marginVertical: 20,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 17,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}